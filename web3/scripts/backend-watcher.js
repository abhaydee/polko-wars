import { ApiPromise, WsProvider, Keyring } from '@polkadot/api';
import { JsonRpcProvider, Wallet, Contract, parseEther } from 'ethers';
import dotenv from 'dotenv';

dotenv.config();

// 1. Polkadot/AssetHub side
const assetHubWs = 'wss://westend-asset-hub-rpc.polkadot.io';
const ESCROW_ADDRESS = '5FTbDyHJ2rte4FhgUPYD1NQnZGhezENt13Cb4bUMt9Ev6Zb2'; // Your Escrow Wallet Address

// 2. Moonbeam side
const moonbeamRpc = 'https://rpc.api.moonbase.moonbeam.network';
const moonbeamProvider = new JsonRpcProvider(moonbeamRpc);
const contractAddress = '0x4c8Dc4C116EE9b65bfB584e7Ed94576280F2371B'; // Deployed smart contract
const privateKey = '0xc07e2a781379aa7c1180de0ab43377a81c99e5d36dc6fd4be8c4eced56af1aec'; // Make sure 0x is added
const wallet = new Wallet(privateKey, moonbeamProvider);

// 3. Smart Contract ABI
const contractAbi = [
Â Â Â Â "function registerBet(uint256 itemId) payable",
];

const contract = new Contract(contractAddress, contractAbi, wallet);

// 4. BET TRACKER
const bets = new Map(); // itemId -> { bettorAddress, betAmountPlanck }

async function main() {
Â Â Â Â const wsProvider = new WsProvider(assetHubWs);
Â Â Â Â const api = await ApiPromise.create({ provider: wsProvider });

Â Â Â Â console.log('ðŸŽ¯ Watching Escrow Wallet on Westend AssetHub...');

Â Â Â Â api.query.system.events((events) => {
Â Â Â Â Â Â Â Â events.forEach(async ({ event }) => {
Â Â Â Â Â Â Â Â Â Â Â Â if (event.section.toString() === 'balances' && event.method.toString() === 'Transfer') {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â const [from, to, value] = event.data;

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (to.toString() === ESCROW_ADDRESS) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â console.log(`ðŸš€ New Bet Detected! From: ${from.toString()}, Amount: ${value.toString()} Plancks`);

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // Convert Plancks -> WND
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â const betAmountInWnd = 0.01; // Plancks to WND

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // Simulate unique Item ID (use better logic later!)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â const randomItemId = 3;

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // Save the bet information
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â bets.set(randomItemId, {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â bettorAddress: from.toString(),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â betAmountPlanck: value.toString()
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â });

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â console.log(`ðŸŽ¯ Registering bet on Moonbeam: ItemID ${randomItemId}, WND: ${betAmountInWnd}, Bettor: ${from.toString()}`);

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â const tx = await contract.registerBet(randomItemId, {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â value: parseEther(betAmountInWnd.toString())
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â });
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â await tx.wait();

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â console.log(`âœ… Bet Registered! TX Hash: ${tx.hash}`);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â });
Â Â Â Â });
}

main().catch(console.error);